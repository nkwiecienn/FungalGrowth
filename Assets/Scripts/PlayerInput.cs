//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MapEditing"",
            ""id"": ""8b2caed3-88ea-4089-99b8-ebfbe95d53eb"",
            ""actions"": [
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""71c64d12-beb8-4fe5-8870-4e9d687dceb5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""05c64386-3a61-489c-b564-8b67be564e57"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""79a1952c-520d-46ba-9878-c09b1ea7596d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnEnter"",
                    ""type"": ""Button"",
                    ""id"": ""29d450c0-d875-45c3-8f61-77e854064036"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnExit"",
                    ""type"": ""Button"",
                    ""id"": ""6db85702-1c49-45dc-9cfa-89f7abb51789"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cadd0e5b-d96c-4e27-a346-4af0f0fb50fa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""745d187f-b535-46a4-aa53-7c9b64550302"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e30d142-f149-4f37-b1b1-0771af58ea4f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e6093c1-80d6-47c2-ab40-1ef10f5c32a0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e4e1ba5-5531-47d6-8c31-bc9f86b8e9bd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        m_MapEditing = asset.FindActionMap("MapEditing", throwIfNotFound: true);
        m_MapEditing_MouseRightClick = m_MapEditing.FindAction("MouseRightClick", throwIfNotFound: true);
        m_MapEditing_MouseLeftClick = m_MapEditing.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_MapEditing_MousePosition = m_MapEditing.FindAction("MousePosition", throwIfNotFound: true);
        m_MapEditing_OnEnter = m_MapEditing.FindAction("OnEnter", throwIfNotFound: true);
        m_MapEditing_OnExit = m_MapEditing.FindAction("OnExit", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_MapEditing.enabled, "This will cause a leak and performance issues, PlayerInput.MapEditing.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    private readonly InputActionMap m_MapEditing;
    private List<IMapEditingActions> m_MapEditingActionsCallbackInterfaces = new List<IMapEditingActions>();
    private readonly InputAction m_MapEditing_MouseRightClick;
    private readonly InputAction m_MapEditing_MouseLeftClick;
    private readonly InputAction m_MapEditing_MousePosition;
    private readonly InputAction m_MapEditing_OnEnter;
    private readonly InputAction m_MapEditing_OnExit;
    public struct MapEditingActions
    {
        private @PlayerInput m_Wrapper;
        public MapEditingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseRightClick => m_Wrapper.m_MapEditing_MouseRightClick;
        public InputAction @MouseLeftClick => m_Wrapper.m_MapEditing_MouseLeftClick;
        public InputAction @MousePosition => m_Wrapper.m_MapEditing_MousePosition;
        public InputAction @OnEnter => m_Wrapper.m_MapEditing_OnEnter;
        public InputAction @OnExit => m_Wrapper.m_MapEditing_OnExit;
        public InputActionMap Get() { return m_Wrapper.m_MapEditing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapEditingActions set) { return set.Get(); }
        public void AddCallbacks(IMapEditingActions instance)
        {
            if (instance == null || m_Wrapper.m_MapEditingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapEditingActionsCallbackInterfaces.Add(instance);
            @MouseRightClick.started += instance.OnMouseRightClick;
            @MouseRightClick.performed += instance.OnMouseRightClick;
            @MouseRightClick.canceled += instance.OnMouseRightClick;
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @OnEnter.started += instance.OnOnEnter;
            @OnEnter.performed += instance.OnOnEnter;
            @OnEnter.canceled += instance.OnOnEnter;
            @OnExit.started += instance.OnOnExit;
            @OnExit.performed += instance.OnOnExit;
            @OnExit.canceled += instance.OnOnExit;
        }

        private void UnregisterCallbacks(IMapEditingActions instance)
        {
            @MouseRightClick.started -= instance.OnMouseRightClick;
            @MouseRightClick.performed -= instance.OnMouseRightClick;
            @MouseRightClick.canceled -= instance.OnMouseRightClick;
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @OnEnter.started -= instance.OnOnEnter;
            @OnEnter.performed -= instance.OnOnEnter;
            @OnEnter.canceled -= instance.OnOnEnter;
            @OnExit.started -= instance.OnOnExit;
            @OnExit.performed -= instance.OnOnExit;
            @OnExit.canceled -= instance.OnOnExit;
        }

        public void RemoveCallbacks(IMapEditingActions instance)
        {
            if (m_Wrapper.m_MapEditingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapEditingActions instance)
        {
            foreach (var item in m_Wrapper.m_MapEditingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapEditingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapEditingActions @MapEditing => new MapEditingActions(this);
    public interface IMapEditingActions
    {
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnOnEnter(InputAction.CallbackContext context);
        void OnOnExit(InputAction.CallbackContext context);
    }
}
